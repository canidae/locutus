/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Detached.java
 *
 * Created on Sep 4, 2009, 9:43:30 PM
 */
package net.exent.locutus.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreePath;
import net.exent.locutus.data.Group;
import net.exent.locutus.data.Metafile;
import net.exent.locutus.database.Database;

/**
 *
 * @author canidae
 */
public class Uncompared extends javax.swing.JPanel {

	private class UncomparedCellRenderer implements TreeCellRenderer {

		public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
			String icon = "unknown_icon.png";
			Object node = ((DefaultMutableTreeNode) value).getUserObject();
			int status = Metafile.NONE;
			if (node instanceof Group) {
				icon = "group.png";
			} else if (node instanceof Metafile) {
				icon = "groupfile.png";
				status = ((Metafile) node).getStatus();
			}
			JLabel label = new JLabel(value.toString(), new ImageIcon(getClass().getResource("/net/exent/locutus/gui/icons/" + icon)), JLabel.LEFT);
			label.setOpaque(true);
			if (selected) {
				label.setBackground(new Color(200, 200, 255));
			} else {
				label.setBackground(new Color(255, 255, 255));
			}
			if (status == Metafile.SAVE_METADATA)
				label.setForeground(new Color(150, 0, 150));
			return label;
		}
	}

	public void updateTree() {
		DefaultTreeModel model = (DefaultTreeModel) uncomparedTree.getModel();
		DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
		List<DefaultMutableTreeNode> remove = new ArrayList<DefaultMutableTreeNode>();
		Enumeration groups = root.children();
		while (groups.hasMoreElements())
			remove.add((DefaultMutableTreeNode) groups.nextElement());
		for (DefaultMutableTreeNode r : remove)
			model.removeNodeFromParent(r);

		try {
			ResultSet rs = Database.getUncompared(Locutus.getFilter());
			if (rs == null)
				return;

			DefaultMutableTreeNode group = null;
			while (rs.next()) {
				Metafile mf = new Metafile();
				mf.setUncomparedData(rs);
				if (group == null || !mf.getGroup().equals(((Group) group.getUserObject()).getName())) {
					if (group != null) {
						((Group) group.getUserObject()).setFiles(model.getChildCount(group));
						model.insertNodeInto(group, root, model.getChildCount(root));
					}
					group = new DefaultMutableTreeNode(new Group(mf.getGroup()));
				}
				model.insertNodeInto(new DefaultMutableTreeNode(mf), group, model.getChildCount(group));
			}
			if (group != null) {
				((Group) group.getUserObject()).setFiles(model.getChildCount(group));
				model.insertNodeInto(group, root, model.getChildCount(root));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		model.setRoot(root);
		uncomparedTree.requestFocus();
		if (uncomparedTree.getRowCount() > 0)
			uncomparedTree.setSelectionRow(0);
	}

	private void saveGroup(DefaultMutableTreeNode groupnode) {
		Enumeration files = groupnode.children();
		while (files.hasMoreElements()) {
			Metafile file = (Metafile) ((DefaultMutableTreeNode) files.nextElement()).getUserObject();
			try {
				if (file.getStatus() == Metafile.SAVE_METADATA) {
					Database.saveMetadata(file);
					file.setStatus(Metafile.NONE);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	/** Creates new form Uncompared */
	public Uncompared() {
		initComponents();
		uncomparedTree.setCellRenderer(new UncomparedCellRenderer());
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jScrollPane1 = new javax.swing.JScrollPane();
                uncomparedTree = new javax.swing.JTree();

                addComponentListener(new java.awt.event.ComponentAdapter() {
                        public void componentShown(java.awt.event.ComponentEvent evt) {
                                formComponentShown(evt);
                        }
                });

                javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
                uncomparedTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
                uncomparedTree.setRootVisible(false);
                uncomparedTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
                        public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                                uncomparedTreeValueChanged(evt);
                        }
                });
                uncomparedTree.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyPressed(java.awt.event.KeyEvent evt) {
                                uncomparedTreeKeyPressed(evt);
                        }
                });
                jScrollPane1.setViewportView(uncomparedTree);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                );
        }// </editor-fold>//GEN-END:initComponents

	private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
		updateTree();
	}//GEN-LAST:event_formComponentShown

	private void uncomparedTreeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_uncomparedTreeKeyPressed
		if (uncomparedTree.getSelectionCount() <= 0)
			return;
		if (evt.isAltDown())
			return; // alt key is used for buttons
		TreePath[] paths = uncomparedTree.getSelectionPaths();
		DefaultMutableTreeNode active_group = null;
		List<DefaultMutableTreeNode> filetreenodes = new ArrayList<DefaultMutableTreeNode>();
		DefaultMutableTreeNode selected = (DefaultMutableTreeNode) paths[0].getLastPathComponent();
		for (TreePath path : paths) {
			DefaultMutableTreeNode current = (DefaultMutableTreeNode) path.getLastPathComponent();
			Object node = current.getUserObject();
			if (node instanceof Group) {
				active_group = current;
				Enumeration files = current.children();
				while (files.hasMoreElements())
					filetreenodes.add((DefaultMutableTreeNode) files.nextElement());
			} else if (node instanceof Metafile) {
				active_group = (DefaultMutableTreeNode) current.getParent();
				filetreenodes.add(current);
			}
		}
		switch (evt.getKeyCode()) {
			case KeyEvent.VK_ESCAPE:
			case KeyEvent.VK_R:
				for (DefaultMutableTreeNode treenode : filetreenodes)
					((Metafile) treenode.getUserObject()).setStatus(Metafile.NONE);
				selected = null;
				break;

			case KeyEvent.VK_G:
				if (uncomparedTree.getSelectionCount() != 1)
					break;
				if (evt.isShiftDown()) {
					if (selected.getUserObject() instanceof Group)
						selected = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) uncomparedTree.getModel().getRoot()).getChildBefore(active_group);
					else
						selected = active_group;
				} else {
					selected = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) uncomparedTree.getModel().getRoot()).getChildAfter(active_group);
				}
				break;

			case KeyEvent.VK_F:
				if (uncomparedTree.getSelectionCount() != 1)
					break;
				if (selected.getUserObject() instanceof Group) {
					if (evt.isShiftDown())
						break;
					uncomparedTree.expandPath(new TreePath(selected.getPath()));
					selected = selected.getNextNode();
				} else if (selected.getUserObject() instanceof Metafile) {
					if (evt.isShiftDown())
						selected = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) selected.getParent()).getChildBefore(selected);
					else
						selected = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) selected.getParent()).getChildAfter(selected);
				}
				break;

			case KeyEvent.VK_E:
				if (active_group == null)
					break;
				uncomparedTree.expandPath(new TreePath(active_group.getPath()));
				/* set selected to null so we don't attempt to expand nodes after this switch */
				selected = null;
				break;

			case KeyEvent.VK_SPACE:
				if (evt.isControlDown()) {
					/* update all groups and reload tree */
					Enumeration albums = ((DefaultMutableTreeNode) uncomparedTree.getModel().getRoot()).children();
					while (albums.hasMoreElements())
						saveGroup((DefaultMutableTreeNode) albums.nextElement());
					updateTree();
				} else {
					/* update files in active group */
					saveGroup(active_group);
					selected = active_group;
				}
				break;

			default:
				return;
		}
		if (selected != null) {
			TreePath path = new TreePath(selected.getPath());
			Enumeration albums = ((DefaultMutableTreeNode) uncomparedTree.getModel().getRoot()).children();
			while (albums.hasMoreElements()) {
				DefaultMutableTreeNode album = (DefaultMutableTreeNode) albums.nextElement();
				TreePath albumpath = new TreePath(album.getPath());
				if (uncomparedTree.isCollapsed(albumpath))
					continue;
				if (!albumpath.isDescendant(path)) {
					uncomparedTree.collapsePath(albumpath);
				} else {
					Enumeration tracks = album.children();
					while (tracks.hasMoreElements()) {
						DefaultMutableTreeNode track = (DefaultMutableTreeNode) tracks.nextElement();
						TreePath trackpath = new TreePath(track.getPath());
						if (uncomparedTree.isExpanded(trackpath) && !trackpath.isDescendant(path))
							uncomparedTree.collapsePath(trackpath);
					}
				}
			}
			uncomparedTree.expandPath(path);
			uncomparedTree.setSelectionPath(path);
			uncomparedTree.scrollPathToVisible(path);
		}
		uncomparedTree.repaint();
	}//GEN-LAST:event_uncomparedTreeKeyPressed

	private void uncomparedTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_uncomparedTreeValueChanged
		TreePath[] paths = uncomparedTree.getSelectionPaths();
		if (paths == null) {
			Locutus.clearMetadata();
			return;
		}
		List<Metafile> metafiles = new ArrayList<Metafile>();
		for (TreePath path : paths) {
			DefaultMutableTreeNode node = ((DefaultMutableTreeNode) path.getLastPathComponent());
			Object object = node.getUserObject();
			if (object instanceof Group) {
				Enumeration files = node.children();
				while (files.hasMoreElements()) {
					object = ((DefaultMutableTreeNode) files.nextElement()).getUserObject();
					if (object instanceof Metafile && !metafiles.contains((Metafile) object))
						metafiles.add((Metafile) object);
				}
			} else if (object instanceof Metafile) {
				if (!metafiles.contains((Metafile) object))
					metafiles.add((Metafile) object);
			}
		}
		Locutus.setSelectedMetadatafiles(metafiles);
	}//GEN-LAST:event_uncomparedTreeValueChanged
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JTree uncomparedTree;
        // End of variables declaration//GEN-END:variables
}
